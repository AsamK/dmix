/*
 * Copyright (C) 2010-2016 The MPDroid Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.awt.HeadlessException

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.28.0'
    }
}

repositories {
    mavenCentral()
    jcenter()
    google()
    maven { url 'https://maven.fabric.io/public' }
}

def gitShortHash() {
    return "git rev-parse --short HEAD".execute().text.trim()
}

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 58
        versionName "1.08 Beta 4 " + gitShortHash()
    }

    lintOptions {
        abortOnError false
        checkReleaseBuilds false
    }

    compileOptions {
        sourceCompatibility '1.8'
        targetCompatibility '1.8'
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }

    flavorDimensions "version"

    productFlavors {
        all {
            dimension "version"
            // Disable Crashlytics by default.
            ext.enableCrashlytics = false;
        }
        foss {
            dimension "version"
            versionName defaultConfig.versionName + "-f"
            dependencies {
                testImplementation 'junit:junit:4.12'
                testImplementation "org.robolectric:robolectric:3.0"
            }
            ext.enableCrashlytics = false;
        }
    }

    applicationVariants.all { final variant ->

        task("${variant.name}Javadoc", type: Javadoc) {
            title = "$name $versionName"
            description "Generates Javadoc for $variant.name."
            group "documentation"
            source = variant.javaCompileProvider
            ext.androidJar =
                    "${android.sdkDirectory}" +
                            "/platforms/${android.compileSdkVersion}/android.jar"
            doFirst {
                classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
            }
            gradle.taskGraph.addTaskExecutionListener new BrowseJavadoc(
                    mTask: "${variant.name}Javadoc",
                    mIndexFile: file("${destinationDir}/index.html"))

            dependsOn = [':JMPDCommAndroid:debugJavadoc'];

            options {
                author = true
                header = project.name
                memberLevel = JavadocMemberLevel.PRIVATE
                links("http://docs.oracle.com/javase/8/docs/api",
                        project.tasks.getByPath(":JMPDCommAndroid:debugJavadoc")
                                .getDestinationDir()
                                .toString());
                linksOffline("http://developer.android.com/reference",
                        "${android.sdkDirectory}/docs/reference");
                overview("src/main/overview.html");
                showAll()
            }

            exclude '**/BuildConfig.java'
            exclude '**/R.java'
        }
    }
}

dependencies {
    // Support Libraries
    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'com.android.support:palette-v7:28.0.0'
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:cardview-v7:28.0.0'
    implementation 'com.android.support:design:28.0.0'
    // Projects
    implementation project(':JMPDCommAndroid')
    // Libraries from maven
    implementation 'asia.ivity.android:drag-sort-listview:1.0'
    implementation 'org.realityforge.org.jetbrains.annotations:org.jetbrains.annotations:1.02.0'
    implementation 'asia.ivity.android:drag-sort-listview-apklib:1.0'
}

class BrowseJavadoc implements TaskExecutionListener {

    String mTask

    File mIndexFile

    @Override
    void beforeExecute(final Task task) {
    }

    @Override
    void afterExecute(final Task task, final TaskState taskState) {
        if (taskState.executed && !taskState.failure && task.name.equals(mTask)) {
            println "Javadoc built: " + mIndexFile
            final def Class desktop = getClass().classLoader.loadClass("java.awt.Desktop")

            try {
                desktop.newInstance().browse(mIndexFile.toURI())
            } catch (final HeadlessException ignored) {
            }
        }
    }
}
