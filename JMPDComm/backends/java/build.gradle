/*
 * Copyright (C) 2004 Felipe Gustavo de Almeida
 * Copyright (C) 2010-2015 The MPDroid Project
 *
 * All Rights Reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice,this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

apply plugin: 'java'

javadoc {
    description = "Generates project-level javadoc."
    title = "${project.name} WIP"

    gradle.taskGraph.addTaskExecutionListener new BrowseJavadoc(
            Task: "javadoc",
            IndexFile: file("${destinationDir}/index.html"))

    options {
        memberLevel = JavadocMemberLevel.PRIVATE
        showAll()
        author = true
        header = project.name
        overview("src/main/overview.html");
    }
}

sourceSets.main {
    java {
        srcDirs = ['../../src/main/java', 'src/main/java']
    }
    resources {
        srcDirs = ['../../src/main/resources']
    }
}

class BrowseJavadoc implements TaskExecutionListener {

    String Task

    File IndexFile

    @Override
    void beforeExecute(final Task task) {
    }

    @Override
    void afterExecute(final Task task, final TaskState taskState) {
        if (taskState.executed && !taskState.failure && task.name.equals(Task)) {
            println "Javadoc built: " + IndexFile

            try {
                def desktop = getClass().classLoader.loadClass("java.awt.Desktop").newInstance()
                desktop.browse(IndexFile.toURI())
            } catch (final java.awt.HeadlessException ignored) {
            }
        }
    }
}